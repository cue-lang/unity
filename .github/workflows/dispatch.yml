# Generated by internal/ci/ci_tool.cue; do not edit

name: Repository Dispatch
on:
- repository_dispatch
jobs:
  test:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    if: ${{ github.event.client_payload.type == 'unity' }}
    steps:
    - if: ${{ github.event.client_payload.payload.cl != null }}
      name: Write netrc file for cueckoo Gerrithub
      run: |-
        cat <<EOD > ~/.netrc
        machine review.gerrithub.io
        login cueckoo
        password ${{ secrets.CUECKOO_GERRITHUB_PASSWORD }}
        EOD
        chmod 600 ~/.netrc
    - if: ${{ github.event.client_payload.payload.cl != null }}
      name: Update Gerrit CL message with starting message
      run: 'curl -f -s -H "Content-Type: application/json" --request POST --data "{\"tag\":\"autogenerated:unity\",\"message\":\"Started
        unity run... see progress at ${{ github.event.repository.html_url }}/actions/runs/${{
        github.run_id }}\"}" https://review.gerrithub.io/a/changes/${{ github.event.client_payload.payload.cl.changeID
        }}/revisions/${{ github.event.client_payload.payload.cl.commit }}/review'
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
        stable: false
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Cache Go modules
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-${{ matrix.go-version }}-go-${{ hashFiles('**/go.sum')
          }}
        restore-keys: ${{ runner.os }}-${{ matrix.go-version }}-go-
    - name: Install unity
      run: ./_scripts/installUnity.sh
    - id: unity_run
      name: Run unity
      run: "set -o pipefail\noutput=$(mktemp)\necho ${{ toJson(github.event.client_payload.payload.versions)
        }} | xargs ./_scripts/runUnity.sh 2>&1 | tee $output\ncontent=\"$(cat $output)\"\ncontent=\"${content//'%'/'%25'}\"\ncontent=\"${content//$'\n'/'%0A'}\"\ncontent=\"${content//$'\r'/'%0D'}\"\necho
        \"::set-output name=output::${content}\""
    - if: ${{ github.event.client_payload.payload.cl != null && failure() }}
      name: Post any failures for this matrix entry
      run: 'curl -f -s -H "Content-Type: application/json" --request POST --data "{\"tag\":\"autogenerated:unity\",\"message\":\"Build
        failed for ${{ runner.os }}-${{ matrix.go-version }}; see ${{ github.event.repository.html_url
        }}/actions/runs/${{ github.run_id }} for more details\",\"labels\":{\"Code-Review\":-1}}"
        https://review.gerrithub.io/a/changes/${{ github.event.client_payload.payload.cl.changeID
        }}/revisions/${{ github.event.client_payload.payload.cl.commit }}/review'
    - if: ${{ github.event.client_payload.payload.cl != null && success() }}
      name: Update Gerrit CL message with success message
      run: 'curl -f -s -H "Content-Type: application/json" --request POST --data "{\"tag\":\"autogenerated:unity\",\"message\":\"Build
        succeeded for ${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id
        }}\\n\\nClick through for rough timing deltas vs. base versions.\",\"labels\":{\"Code-Review\":1}}"
        https://review.gerrithub.io/a/changes/${{ github.event.client_payload.payload.cl.changeID
        }}/revisions/${{ github.event.client_payload.payload.cl.commit }}/review'
    strategy:
      fail-fast: false
      matrix:
        go-version:
        - "1.16"
        os:
        - ubuntu-18.04
