# Code generated internal/ci/ci_tool.cue; DO NOT EDIT.

name: Unity
"on":
  push:
    branches:
      - unity/*/*/*/*
jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: true
          fetch-depth: 0
      - name: Reset git directory modification times
        run: touch -t 202211302355 $(find * -type d)
      - name: Restore git file modification times
        uses: chetan/git-restore-mtime-action@075f9bc9d159805603419d50f794bd9f33252ebe
      - id: DispatchTrailer
        name: Try to extract Dispatch-Trailer
        run: |-
          x="$(git log -1 --pretty='%(trailers:key=Dispatch-Trailer,valueonly)')"
          if [[ "$x" == "" ]]
          then
              x=null
          fi
          echo "x is $x"
          echo "value<<EOD" >> $GITHUB_OUTPUT
          echo "$x" >> $GITHUB_OUTPUT
          echo "EOD" >> $GITHUB_OUTPUT
      - if: |-
          ((github.ref == 'refs/heads/main') && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) && (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"'))
        name: Check we don't have Dispatch-Trailer on a protected branch
        run: |-
          echo "github.event.head_commit.message contains Dispatch-Trailer"
          echo "github.event.head_commit.message value"
          cat <<EOD
          ${{ github.event.head_commit.message }}
          EOD
          echo "containsDispatchTrailer expression"
          cat <<EOD
          (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"'))
          EOD
          false
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          cache: false
          go-version: 1.20.x
      - id: go-mod-cache-dir
        name: Get go mod cache directory
        run: echo "dir=$(go env GOMODCACHE)" >> ${GITHUB_OUTPUT}
      - id: go-cache-dir
        name: Get go build/test cache directory
        run: echo "dir=$(go env GOCACHE)" >> ${GITHUB_OUTPUT}
      - uses: actions/cache/restore@v3
        with:
          path: |-
            ${{ steps.go-mod-cache-dir.outputs.dir }}/cache/download
            ${{ steps.go-cache-dir.outputs.dir }}
          key: Linux-1.20.x-${{ github.run_id }}
          restore-keys: Linux-1.20.x
      - name: Install unity
        run: ./_scripts/installUnity.sh
      - name: Run unity
        run: |-
          # GITHUB_REF is in the form of:
          # "refs/heads/unity/$change_id/$commit/$cl_number/$ps_number".
          # When a user runs "cueckoo runtrybot", it triggers a
          # repository dispatch on the main unity repository,
          # which then pushes the branch unity/... to the
          # cue-trybot repository, triggering the workflow here.
          # The commit (the third element) is enough to do a git fetch.
          commit=$(echo $GITHUB_REF | cut -d "/" -f 5)

          dir_head=$PWD/checkout_head
          dir_parent=$PWD/checkout_parent

          # Initialize an empty git repo and fetch the CL.
          # depth=2 is enough for HEAD and its parent.
          # Make a copy for the parent checkout to reuse the fetch.
          mkdir $dir_head
          cd $dir_head
          git init
          git fetch --depth=2 https://review.gerrithub.io/cue-lang/cue ${commit}
          cp -r $dir_head $dir_parent

          # Switch into the HEAD commit and show it.
          cd $dir_head
          git switch -d FETCH_HEAD
          echo "HEAD commit:"
          git log -1

          # Switch into the parent commit and show it.
          cd $dir_parent
          git switch -d FETCH_HEAD~1
          echo "parent commit:"
          git log -1

          cd ..
          ./_scripts/runUnity.sh --skip-base $dir_parent $dir_head
