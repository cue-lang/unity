# Code generated internal/ci/ci_tool.cue; DO NOT EDIT.

"on":
  - repository_dispatch
jobs:
  test:
    if: ${{ github.event.client_payload.type == 'unity' && github.event.client_payload.payload.cl == null }}
    strategy:
      fail-fast: false
      matrix:
        go-version:
          - 1.20.x
        os:
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: true
          fetch-depth: 0
      - name: Reset git directory modification times
        run: touch -t 202211302355 $(find * -type d)
      - name: Restore git file modification times
        uses: chetan/git-restore-mtime-action@075f9bc9d159805603419d50f794bd9f33252ebe
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          cache: false
          go-version: ${{ matrix.go-version }}
      - id: go-mod-cache-dir
        name: Get go mod cache directory
        run: echo "dir=$(go env GOMODCACHE)" >> ${GITHUB_OUTPUT}
      - id: go-cache-dir
        name: Get go build/test cache directory
        run: echo "dir=$(go env GOCACHE)" >> ${GITHUB_OUTPUT}
      - if: (github.ref == 'refs/heads/master')
        uses: actions/cache@v3
        with:
          path: |-
            ${{ steps.go-mod-cache-dir.outputs.dir }}/cache/download
            ${{ steps.go-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.go-version }}-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-${{ matrix.go-version }}
      - if: '! (github.ref == ''refs/heads/master'')'
        uses: actions/cache/restore@v3
        with:
          path: |-
            ${{ steps.go-mod-cache-dir.outputs.dir }}/cache/download
            ${{ steps.go-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.go-version }}-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-${{ matrix.go-version }}
      - name: Install unity
        run: ./_scripts/installUnity.sh
      - id: unity_run
        name: Run unity
        run: |-
          set -o pipefail
          echo ${{ toJson(github.event.client_payload.payload.versions) }} | xargs ./_scripts/runUnity.sh
