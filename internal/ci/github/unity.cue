// Copyright 2022 The CUE Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package github

import (
	encjson "encoding/json"
	"strconv"
)

unity: _#bashWorkflow & {
	// These constants are defined by github.com/cue-sh/tools/cmd/cueckoo
	_#runtrybot: "runtrybot"
	_#mirror:    "mirror"
	_#importpr:  "importpr"
	_#unity:     "unity"

	_#dispatchJob: _#job & {
		_#type: string
		if:     "${{ github.event.client_payload.type == '\(_#type)' }}"
	}

	name: "Unity"
	on: ["repository_dispatch"]

	jobs: {
		test: _#dispatchJob & {
			_#type:    _#unity
			strategy:  _#testStrategy
			"runs-on": "${{ matrix.os }}"
			steps: [
				_#writeNetrcFile & {
					if: "${{ \(_#ifIsCLVersion) }}"
				},
				_#startCLBuild & {
					if: "${{ \(_#ifIsCLVersion) }}"
				},
				_#installGo,
				_#checkoutCode,
				_#cacheGoModules,
				_#installUnity,
				_#step & {
					name: "Run unity"
					id:   "unity_run"
					run: """
						set -o pipefail
						output=$(mktemp)
						echo ${{ toJson(github.event.client_payload.payload.versions) }} | xargs ./_scripts/runUnity.sh 2>&1 | tee $output
						content="$(cat $output)"
						content="${content//'%'/'%25'}"
						content="${content//$'\n'/'%0A'}"
						content="${content//$'\r'/'%0D'}"
						echo "::set-output name=output::${content}"
						"""
				},
				_#failCLBuild & {
					if: "${{ \(_#ifIsCLVersion) && failure() }}"
				},
				_#passCLBuild & {
					if: "${{ \(_#ifIsCLVersion) && success() }}"
				},
			]
		}
	}

	_#ifIsCLVersion: "github.event.client_payload.payload.cl != null"

	_#startCLBuild: _#step & {
		name: "Update Gerrit CL message with starting message"
		run:  (_#gerrit._#setCodeReview & {
			#args: {
				message: "Started unity run... see progress at ${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}"
			}
		}).res
	}

	_#failCLBuild: _#step & {
		name: "Post any failures for this matrix entry"
		run:  (_#gerrit._#setCodeReview & {
			#args: {
				message: "Build failed for ${{ runner.os }}-${{ matrix.go-version }}; see ${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }} for more details"
				labels: {
					"Unity-Result": -1
				}
			}
		}).res
	}

	_#passCLBuild: _#step & {
		name: "Update Gerrit CL message with success message"
		run:  (_#gerrit._#setCodeReview & {
			#args: {
				message: """
					Build succeeded for ${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}

					Click through for rough timing deltas vs. base versions.
					"""
				labels: {
					"Unity-Result": 1
				}
			}
		}).res
	}

	_#gerrit: {
		_#setCodeReview: {
			#args: {
				tag:     "autogenerated:unity"
				message: string
				labels?: {
					"Unity-Result": int
				}
			}
			res: #"""
			curl -f -n -s -H "Content-Type: application/json" --request POST --data \#(strconv.Quote(encjson.Marshal(#args))) https://review.gerrithub.io/a/changes/${{ github.event.client_payload.payload.cl.changeID }}/revisions/${{ github.event.client_payload.payload.cl.commit }}/review
			"""#
		}
	}
}
